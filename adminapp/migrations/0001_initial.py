# Generated by Django 5.0.6 on 2024-05-15 11:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('firstname', models.CharField(max_length=30)),
                ('lastname', models.CharField(max_length=30)),
                ('phonenumber', models.CharField(max_length=15)),
                ('profession', models.CharField(choices=[('Medical Doctor', 'Medical Doctor'), ('Engineer', 'Engineer'), ('Lawyer', 'Lawyer'), ('Teacher', 'Teacher'), ('Nurse', 'Nurse'), ('Software Developer', 'Software Developer'), ('Architect', 'Architect'), ('Chef', 'Chef'), ('Accountant', 'Accountant'), ('Dentist', 'Dentist'), ('Pharmacist', 'Pharmacist'), ('Psychologist', 'Psychologist'), ('Graphic Designer', 'Graphic Designer'), ('Electrician', 'Electrician'), ('Plumber', 'Plumber'), ('Mechanic', 'Mechanic'), ('Artist', 'Artist'), ('Writer', 'Writer'), ('Photographer', 'Photographer'), ('Musician', 'Musician'), ('Dancer', 'Dancer'), ('Marketing Specialist', 'Marketing Specialist'), ('Consultant', 'Consultant'), ('Financial Advisor', 'Financial Advisor'), ('Real Estate Agent', 'Real Estate Agent'), ('IT Specialist', 'IT Specialist'), ('Web Developer', 'Web Developer'), ('Data Scientist', 'Data Scientist'), ('Project Manager', 'Project Manager'), ('Human Resources Manager', 'Human Resources Manager'), ('Event Planner', 'Event Planner'), ('Fitness Trainer', 'Fitness Trainer'), ('Interior Designer', 'Interior Designer'), ('Journalist', 'Journalist'), ('Translator', 'Translator'), ('Law Enforcement Officer', 'Law Enforcement Officer'), ('Firefighter', 'Firefighter'), ('Paramedic', 'Paramedic'), ('Flight Attendant', 'Flight Attendant'), ('Pilot', 'Pilot'), ('Veterinarian', 'Veterinarian'), ('Biologist', 'Biologist'), ('Chemist', 'Chemist'), ('Geologist', 'Geologist'), ('Meteorologist', 'Meteorologist'), ('Librarian', 'Librarian'), ('Social Worker', 'Social Worker')], max_length=50)),
                ('location', models.CharField(max_length=200)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='user_images/')),
                ('church_branch', models.CharField(choices=[('Evbotubu', 'Evbotubu'), ('GRA', 'GRA'), ('Sakpoba', 'Sakpoba'), ('Italy', 'Italy'), ('Uselu', 'Uselu'), ('United Kingdom', 'United Kingdom'), ('Canada', 'Canada'), ('USA', 'USA')], max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week', models.CharField(max_length=20)),
                ('date', models.DateField()),
                ('link', models.URLField()),
                ('attendees', models.ManyToManyField(related_name='attended_meetings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
